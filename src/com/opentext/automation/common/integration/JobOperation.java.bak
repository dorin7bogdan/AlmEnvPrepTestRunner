package com.ot.automation.common.integration;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import net.minidev.json.JSONArray;
import net.minidev.json.JSONObject;
import net.minidev.json.JSONValue;

public class JobOperation {
   public static final String LOGIN_SECRET = "x-hp4msecret";
   public static final String SPLIT_COMMA = ";";
   public static final String JSESSIONID = "JSESSIONID";
   public static final String ACCEPT = "Accept";
   public static final String CONTENT_TYPE = "Content-Type";
   public static final String COOKIE = "Cookie";
   public static final String SET_COOKIE = "Set-Cookie";
   public static final String EQUAL = "=";
   private static final String CONTENT_TYPE_DOWNLOAD_VALUE = "multipart/form-data; boundary=----";
   private static final String BOUNDARYSTR = "randomstring";
   public static final String LOGIN_URL = "/rest/client/login";
   public static final String CREATE_JOB_URL = "/rest/job/createTempJob";
   public static final String GET_JOB_URL = "/rest/job/";
   public static final String UPLOAD_APP_URL = "/rest/apps/upload";
   private String _serverUrl;
   private String _userName;
   private String _password;
   private String proxyHost;
   private String proxyPort;
   private String proxyUserName;
   private String proxyPassword;

   public JobOperation() {
   }

   public JobOperation(String serverUrl, String userName, String password) {
      this._userName = userName;
      this._password = password;
      this._serverUrl = this.checkUrl(serverUrl);
   }

   public JobOperation(String serverUrl, String userName, String password, String address, String proxyUserName, String proxyPassword) {
      this._userName = userName;
      this._password = password;
      this._serverUrl = this.checkUrl(serverUrl);
      if (address != null) {
         address = this.checkUrl(address);
         int i = address.lastIndexOf(58);
         if (i > 0) {
            this.proxyHost = address.substring(0, i);
            this.proxyPort = address.substring(i + 1, address.length());
         } else {
            this.proxyHost = address;
            this.proxyPort = "80";
         }
      }

      this.proxyUserName = proxyUserName;
      this.proxyPassword = proxyPassword;
   }

   public String upload(String appPath) throws HttpConnectionException, IOException {
      String json = null;
      String hp4mSecret = null;
      String jsessionId = null;
      String loginJson = this.loginToMC();

      try {
         if (loginJson != null) {
            JSONObject jsonObject = (JSONObject)JSONValue.parseStrict(loginJson);
            hp4mSecret = (String)jsonObject.get("x-hp4msecret");
            jsessionId = (String)jsonObject.get("JSESSIONID");
         }
      } catch (Exception var17) {
         var17.printStackTrace();
      }

      File appFile = new File(appPath);
      String uploadUrl = this._serverUrl + "/rest/apps/upload";
      Map<String, String> headers = new HashMap();
      headers.put("x-hp4msecret", hp4mSecret);
      headers.put("Cookie", "JSESSIONID=" + jsessionId);
      headers.put("Content-Type", "multipart/form-data; boundary=----randomstring");
      headers.put("filename", appFile.getName());
      ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
      StringBuffer content = new StringBuffer();
      content.append("\r\n").append("------").append("randomstring").append("\r\n");
      content.append("Content-Disposition: form-data; name=\"file\"; filename=\"" + appFile.getName() + "\"\r\n");
      content.append("Content-Type: application/octet-stream\r\n\r\n");
      outputStream.write(content.toString().getBytes());
      FileInputStream in = new FileInputStream(appFile);
      byte[] b = new byte[1024];
      boolean var13 = false;

      int i;
      while((i = in.read(b)) != -1) {
         outputStream.write(b, 0, i);
      }

      in.close();
      outputStream.write("\r\n------randomstring--\r\n".getBytes());
      byte[] bytes = outputStream.toByteArray();
      outputStream.close();
      HttpUtils.ProxyInfo proxyInfo = HttpUtils.setProxyCfg(this.proxyHost, this.proxyPort, this.proxyUserName, this.proxyPassword);
      HttpResponse response = HttpUtils.post(proxyInfo, uploadUrl, headers, bytes);
      if (response != null && response.getJsonObject() != null) {
         json = response.getJsonObject().toJSONString();
      }

      return json;
   }

   public String loginToMC() throws HttpConnectionException {
      JSONObject returnObject = new JSONObject();
      Map<String, String> headers = new HashMap();
      headers.put("Accept", "application/json");
      headers.put("Content-Type", "application/json;charset=UTF-8");
      JSONObject sendObject = new JSONObject();
      sendObject.put("name", this._userName);
      sendObject.put("password", this._password);
      sendObject.put("accountName", "default");
      HttpUtils.ProxyInfo proxyInfo = null;
      if (this.proxyHost != null && this.proxyPort != null) {
         proxyInfo = HttpUtils.setProxyCfg(this.proxyHost, this.proxyPort, this.proxyUserName, this.proxyPassword);
      }

      HttpResponse response = HttpUtils.post(proxyInfo, this._serverUrl + "/rest/client/login", headers, sendObject.toJSONString().getBytes());
      if (response != null && response.getResponseCode() != null) {
         returnObject.put("code", response.getResponseCode());
      }

      if (response != null && response.getHeaders() != null) {
         Map<String, List<String>> headerFields = response.getHeaders();
         List<String> hp4mSecretList = (List)headerFields.get("x-hp4msecret");
         String hp4mSecret = null;
         if (hp4mSecretList != null && hp4mSecretList.size() != 0) {
            hp4mSecret = (String)hp4mSecretList.get(0);
         }

         List<String> setCookieList = (List)headerFields.get("Set-Cookie");
         String setCookie = null;
         if (setCookieList != null && setCookieList.size() != 0) {
            setCookie = (String)setCookieList.get(0);
         }

         String jsessionId = this.getJSESSIONID(setCookie);
         if (hp4mSecret == null || jsessionId == null) {
            throw new HttpConnectionException();
         }

         returnObject.put("JSESSIONID", jsessionId);
         returnObject.put("x-hp4msecret", hp4mSecret);
         returnObject.put("Cookie", "JSESSIONID=" + jsessionId);
      }

      return returnObject.toJSONString();
   }

   public String createTempJob() throws HttpConnectionException {
      String json = null;
      String hp4mSecret = null;
      String jsessionId = null;
      String loginJson = this.loginToMC();

      try {
         if (loginJson != null) {
            JSONObject jsonObject = (JSONObject)JSONValue.parseStrict(loginJson);
            hp4mSecret = (String)jsonObject.get("x-hp4msecret");
            jsessionId = (String)jsonObject.get("JSESSIONID");
         }
      } catch (Exception var9) {
         var9.printStackTrace();
      }

      boolean b = CommonUtils.doCheck(hp4mSecret, jsessionId);
      if (b) {
         Map<String, String> headers = new HashMap();
         headers.put("x-hp4msecret", hp4mSecret);
         headers.put("Cookie", "JSESSIONID=" + jsessionId);
         HttpUtils.ProxyInfo proxyInfo = null;
         if (this.proxyHost != null && this.proxyPort != null) {
            proxyInfo = HttpUtils.setProxyCfg(this.proxyHost, this.proxyPort, this.proxyUserName, this.proxyPassword);
         }

         HttpResponse response = HttpUtils.get(proxyInfo, this._serverUrl + "/rest/job/createTempJob", headers, (String)null);
         if (response != null && response.getJsonObject() != null) {
            json = response.getJsonObject().toJSONString();
         }
      }

      return json;
   }

   public JSONObject getJobById(String jobUUID) throws HttpConnectionException {
      JSONObject jobJsonObject = null;
      String hp4mSecret = null;
      String jsessionId = null;
      String loginJson = this.loginToMC();

      try {
         if (loginJson != null) {
            JSONObject jsonObject = (JSONObject)JSONValue.parseStrict(loginJson);
            hp4mSecret = (String)jsonObject.get("x-hp4msecret");
            jsessionId = (String)jsonObject.get("JSESSIONID");
         }
      } catch (Exception var10) {
         var10.printStackTrace();
      }

      boolean b = CommonUtils.doCheck(jobUUID, hp4mSecret, jsessionId);
      if (b) {
         Map<String, String> headers = new HashMap();
         headers.put("x-hp4msecret", hp4mSecret);
         headers.put("Cookie", "JSESSIONID=" + jsessionId);
         HttpUtils.ProxyInfo proxyInfo = null;
         if (this.proxyHost != null && this.proxyPort != null) {
            proxyInfo = HttpUtils.setProxyCfg(this.proxyHost, this.proxyPort, this.proxyUserName, this.proxyPassword);
         }

         HttpResponse response = HttpUtils.get(proxyInfo, this._serverUrl + "/rest/job/" + jobUUID, headers, (String)null);
         if (response != null && response.getJsonObject() != null) {
            jobJsonObject = response.getJsonObject();
         }
      }

      return jobJsonObject;
   }

   public String getJobJSONData(String jobUUID) throws HttpConnectionException {
      JSONObject jobJSON = this.getJobById(jobUUID);
      JSONObject returnJSON = new JSONObject();
      JSONObject dataJSON = null;
      if (jobJSON != null) {
         dataJSON = (JSONObject)jobJSON.get("data");
      }

      if (dataJSON != null) {
         JSONObject returnDeviceCapabilityJSON = new JSONObject();
         JSONObject detailJSON = (JSONObject)dataJSON.get("capableDeviceFilterDetails");
         String deviceID;
         if (detailJSON != null) {
            String osType = (String)detailJSON.get("platformName");
            String osVersion = (String)detailJSON.get("platformVersion");
            String manufacturerAndModel = (String)detailJSON.get("deviceName");
            deviceID = (String)detailJSON.get("source");
            returnDeviceCapabilityJSON.put("OS", osType + osVersion);
            returnDeviceCapabilityJSON.put("manufacturerAndModel", manufacturerAndModel);
            returnDeviceCapabilityJSON.put("targetLab", deviceID);
         }

         JSONObject returnDeviceJSON = new JSONObject();
         JSONArray devices = (JSONArray)dataJSON.get("devices");
         String headerStr;
         if (devices != null) {
            JSONObject deviceJSON = (JSONObject)devices.get(0);
            if (deviceJSON != null) {
               deviceID = deviceJSON.getAsString("deviceID");
               String osType = deviceJSON.getAsString("osType");
               String osVersion = deviceJSON.getAsString("osVersion");
               headerStr = deviceJSON.getAsString("model");
               returnDeviceJSON.put("deviceId", deviceID);
               returnDeviceJSON.put("OS", osType + " " + osVersion);
               returnDeviceJSON.put("manufacturerAndModel", headerStr);
            }
         }

         JSONArray returnExtraJSONArray = new JSONArray();
         JSONArray extraAppJSONArray = (JSONArray)dataJSON.get("extraApps");
         JSONObject applicationJSON;
         if (extraAppJSONArray != null) {
            Iterator iterator = extraAppJSONArray.iterator();

            while(iterator.hasNext()) {
               applicationJSON = new JSONObject();
               JSONObject nextJSONObject = (JSONObject)iterator.next();
               String extraAppName = (String)nextJSONObject.get("name");
               Boolean instrumented = (Boolean)nextJSONObject.get("instrumented");
               applicationJSON.put("extraAppName", extraAppName);
               applicationJSON.put("instrumented", instrumented ? "Packaged" : "Not Packaged");
               returnExtraJSONArray.add(applicationJSON);
            }
         }

         JSONObject returnDefinitionJSON = new JSONObject();
         applicationJSON = (JSONObject)dataJSON.get("application");
         if (applicationJSON != null) {
            headerStr = (String)applicationJSON.get("name");
            Boolean instrumented = (Boolean)applicationJSON.get("instrumented");
            returnDefinitionJSON.put("launchApplicationName", headerStr);
            returnDefinitionJSON.put("instrumented", instrumented ? "Packaged" : "Not Packaged");
         }

         headerStr = (String)dataJSON.get("header");
         JSONObject headerJSON = this.parseJSONString(headerStr);
         if (headerJSON != null) {
            JSONObject configurationJSONObject = (JSONObject)headerJSON.get("configuration");
            Boolean restart = (Boolean)configurationJSONObject.get("restartApp");
            Boolean install = (Boolean)configurationJSONObject.get("installAppBeforeExecution");
            Boolean uninstall = (Boolean)configurationJSONObject.get("deleteAppAfterExecution");
            StringBuffer sb = new StringBuffer("");
            if (restart) {
               sb.append("Restart;");
            }

            if (install) {
               sb.append("Install;");
            }

            if (uninstall) {
               sb.append("Uninstall;");
            }

            JSONObject collectJSON = (JSONObject)headerJSON.get("collect");
            StringBuffer deviceMetricsSb = new StringBuffer("");
            if (collectJSON != null) {
               Boolean useCPU = (Boolean)collectJSON.get("cpu");
               Boolean useMemory = (Boolean)collectJSON.get("memory");
               Boolean useLogs = (Boolean)collectJSON.get("logs");
               Boolean useScreenshot = (Boolean)collectJSON.get("screenshot");
               Boolean useFreeMemory = (Boolean)collectJSON.get("freeMemory");
               if (useCPU) {
                  deviceMetricsSb.append("CPU;");
               }

               if (useMemory) {
                  deviceMetricsSb.append("Memory;");
               }

               if (useLogs) {
                  deviceMetricsSb.append("Log;");
               }

               if (useScreenshot) {
                  deviceMetricsSb.append("Screenshot;");
               }

               if (useFreeMemory) {
                  deviceMetricsSb.append("FreeMomery;");
               }
            }

            returnDefinitionJSON.put("autActions", this.removeLastSemicolon(sb));
            returnDefinitionJSON.put("deviceMetrics", this.removeLastSemicolon(deviceMetricsSb));
         }

         returnJSON.put("deviceCapability", returnDeviceCapabilityJSON);
         returnJSON.put("extraApps", returnExtraJSONArray);
         returnJSON.put("definitions", returnDefinitionJSON);
         returnJSON.put("jobUUID", jobUUID);
         returnJSON.put("specificDevice", returnDeviceJSON);
      }

      return returnJSON.toJSONString();
   }

   public String removeLastSemicolon(StringBuffer sb) {
      int len = sb.length();
      if (len > 0) {
         sb = sb.delete(len - 1, len);
         return sb.toString();
      } else {
         return sb.toString();
      }
   }

   public JSONObject parseJSONString(String jsonString) {
      JSONObject jsonObject = null;

      try {
         jsonObject = (JSONObject)JSONValue.parseStrict(jsonString);
      } catch (Exception var4) {
         var4.printStackTrace();
      }

      return jsonObject;
   }

   private String getJSESSIONID(String setCookie) {
      String id = null;
      String[] cookies = setCookie.split(";");

      for(int i = 0; i < cookies.length; ++i) {
         if (cookies[i].contains("JSESSIONID")) {
            int index = cookies[i].indexOf("=");
            id = cookies[i].substring(index + 1);
            break;
         }
      }

      return id;
   }

   public void setProxyPort(String proxyPort) {
      this.proxyPort = proxyPort;
   }

   public void setProxyPassword(String proxyPassword) {
      this.proxyPassword = proxyPassword;
   }

   public void setProxyUserName(String proxyUserName) {
      this.proxyUserName = proxyUserName;
   }

   public void setProxyHost(String proxyHost) {
      this.proxyHost = proxyHost;
   }

   private String checkUrl(String serverUrl) {
      if (serverUrl != null && serverUrl.endsWith("/")) {
         int index = serverUrl.lastIndexOf("/");
         serverUrl = serverUrl.substring(0, index);
         return serverUrl;
      } else {
         return serverUrl;
      }
   }
}
