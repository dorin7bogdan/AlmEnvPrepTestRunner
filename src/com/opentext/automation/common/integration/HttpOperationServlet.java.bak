package com.ot.automation.common.integration;

import java.io.Closeable;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Writer;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HttpOperationServlet extends HttpServlet {
   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
      this.doPost(req, resp);
   }

   protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
      String serverUrl = req.getParameter("mcServerURLInput");
      String userName = req.getParameter("mcUserNameInput");
      String password = req.getParameter("mcPasswordInput");
      String useProxy = req.getParameter("useProxy");
      String useAuthentication = req.getParameter("useAuthentication");
      String proxyAddress = req.getParameter("proxyAddress");
      String proxyUserName = req.getParameter("proxyUserName");
      String proxyPassword = req.getParameter("proxyPassword");
      boolean isProxy = Boolean.valueOf(useProxy);
      boolean isAuthentication = Boolean.valueOf(useAuthentication);
      String msg = "";
      JobOperation operation = null;
      if (CommonUtils.doCheck(serverUrl, userName, password)) {
         try {
            if (isProxy) {
               if (proxyAddress != null && proxyAddress != "") {
                  if (isAuthentication) {
                     if (proxyUserName != null && proxyUserName != "" && proxyPassword != null && proxyPassword != "") {
                        operation = new JobOperation(serverUrl, userName, password, proxyAddress, proxyUserName, proxyPassword);
                        msg = this.send(operation, req);
                     } else {
                        msg = "{\"myErrorCode\":\"4\"}";
                     }
                  } else {
                     operation = new JobOperation(serverUrl, userName, password, proxyAddress, (String)null, (String)null);
                     msg = this.send(operation, req);
                  }
               } else {
                  msg = "{\"myErrorCode\":\"2\"}";
               }
            } else {
               operation = new JobOperation(serverUrl, userName, password, (String)null, (String)null, (String)null);
               msg = this.send(operation, req);
            }
         } catch (Exception var16) {
         }
      } else {
         msg = "{\"myErrorCode\":\"0\"}";
      }

      this.writeJSON(resp, msg);
   }

   private String send(JobOperation operation, HttpServletRequest req) throws Exception {
      String method = req.getParameter("method");
      String msg = "";
      if ("createTempJob".equals(method)) {
         msg = operation.createTempJob();
      } else if ("getJobJSONData".equals(method)) {
         String jobUUID = req.getParameter("jobUUID");
         msg = operation.getJobJSONData(jobUUID);
      }

      return msg;
   }

   private void writeJSON(HttpServletResponse resp, String info) throws ServletException, IOException {
      PrintWriter writer = null;

      try {
         writer = resp.getWriter();
         writer.write(info);
         writer.flush();
      } finally {
         closeQuietly(writer);
      }
   }
   private void closeQuietly(Closeable closeable) {
      try {
         if (closeable != null) {
            closeable.close();
         }
      } catch (IOException ex) {
      }
   }
}
